(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{492:function(t,e,a){"use strict";a.r(e);var n=a(15),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"什么是单例模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是单例模式"}},[t._v("#")]),t._v(" 什么是单例模式")]),t._v(" "),a("p",[t._v("设计模式中使用最广、最简单的模式就是单例模式了")]),t._v(" "),a("blockquote",[a("p",[t._v("单例模式（Singleton Pattern） 又称为单体模式，保证一个类只有一个实例，并提供一个访问它的全局访问点。也就是说，第二次使用同一个类创建新对象的时候，应该得到与第一次创建的对象完全相同的对象")])]),t._v(" "),a("p",[t._v("那么开发中哪里有这些场景呢？有登录模块、window 对象、数据库连接等，我们看下单例模式怎么实现")]),t._v(" "),a("h2",{attrs:{id:"单例模式的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例模式的实现"}},[t._v("#")]),t._v(" 单例模式的实现")]),t._v(" "),a("p",[t._v("当使用 new 创建新实例的时候，实例间并不是相同的，不满足单例模式的条件")])])}),[],!1,null,null,null);e.default=r.exports}}]);