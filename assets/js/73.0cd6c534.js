(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{491:function(t,a,s){"use strict";s.r(a);var r=s(15),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"什么是设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是设计模式"}},[t._v("#")]),t._v(" 什么是设计模式")]),t._v(" "),s("p",[t._v("设计模式是对软件设计开发过程中反复出现的某类问题的通用解决方案。它并不是给现成的代码，而更多的是给与指导思想和方法论。每种语言中设计模式都有不同的实现方式，我们学习设计模式的目的是理解这些模式的内在思想和问题的解决思路，从而提升自己的设计理念。")]),t._v(" "),s("h2",{attrs:{id:"设计原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计原则"}},[t._v("#")]),t._v(" 设计原则")]),t._v(" "),s("p",[t._v("设计模式遵循 SOLID 五大原则，其中单一职责和开放封闭两个 JS 常用，后三者使用较少，了解即可")]),t._v(" "),s("h3",{attrs:{id:"s-单一职责原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#s-单一职责原则"}},[t._v("#")]),t._v(" S 单一职责原则")]),t._v(" "),s("p",[t._v("一个程序只做好一件事")]),t._v(" "),s("p",[t._v("如果功能过于复杂就拆分，每个部分保持独立")]),t._v(" "),s("h3",{attrs:{id:"o-开放封闭原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#o-开放封闭原则"}},[t._v("#")]),t._v(" O 开放封闭原则")]),t._v(" "),s("p",[t._v("对扩展开放、对修改封闭")]),t._v(" "),s("p",[t._v("增加新需求时，扩展新代码，而非修改已有代码")]),t._v(" "),s("h3",{attrs:{id:"l-里式替换原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#l-里式替换原则"}},[t._v("#")]),t._v(" L 里式替换原则")]),t._v(" "),s("h3",{attrs:{id:"i-接口独立原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-接口独立原则"}},[t._v("#")]),t._v(" I 接口独立原则")]),t._v(" "),s("h3",{attrs:{id:"d-依赖导致原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#d-依赖导致原则"}},[t._v("#")]),t._v(" D 依赖导致原则")])])}),[],!1,null,null,null);a.default=e.exports}}]);