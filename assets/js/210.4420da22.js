(window.webpackJsonp=window.webpackJsonp||[]).push([[210],{565:function(t,a,e){"use strict";e.r(a);var s=e(8),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),a("h3",{attrs:{id:"js-数据类型有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-数据类型有哪些"}},[t._v("#")]),t._v(" JS 数据类型有哪些")]),t._v(" "),a("p",[t._v("JS 有八种数据类型，根据存储方式分为基本数据类型和引用数据类型。存放在栈中的基本数据类型有 null、undefined、string、number、boolean、symbol、bigint。存放在堆中的引用数据类型指的是 Object类型，包括普通对象 Object、Function、Array、RegExp、Date、Math")]),t._v(" "),a("h3",{attrs:{id:"null-和-undefined-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined-的区别"}},[t._v("#")]),t._v(" null 和 undefined 的区别")]),t._v(" "),a("p",[t._v("null 和 undefined 都是基本数据类型，但是")]),t._v(" "),a("ul",[a("li",[t._v("null 表示空对象，undefined 表示未定义")]),t._v(" "),a("li",[t._v("null 是保留字，不可作为变量名；undefined 不是保留字，可作为变量名，但是很危险，不推荐")]),t._v(" "),a("li",[t._v("使用 typeof 判断时，undefined 返回类型 “undefined”，而 null 返回 “Object”，并非自身数据类型")])]),t._v(" "),a("h3",{attrs:{id:"null-是对象吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-是对象吗"}},[t._v("#")]),t._v(" null 是对象吗")]),t._v(" "),a("p",[t._v("虽然在 typeof 的返回值是 “Object”，但 null 不是对象。这是一个历史遗留问题：早期 JS 采用 32 位单元来储存值，其中前三位为 000 的为对象，而 null 全是 0，在 typeof 检测下显示为对象。")]),t._v(" "),a("h3",{attrs:{id:"说一下-symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说一下-symbol"}},[t._v("#")]),t._v(" 说一下 symbol")]),t._v(" "),a("h3",{attrs:{id:"为什么引入-bigint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么引入-bigint"}},[t._v("#")]),t._v(" 为什么引入 bigint")]),t._v(" "),a("h3",{attrs:{id:"数据类型检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型检测"}},[t._v("#")]),t._v(" 数据类型检测")]),t._v(" "),a("ul",[a("li",[t._v("基本数据类型可以用 typeof 检测，但是检测 null 为 对象，而所有对象检测都是 Object，无法区分")]),t._v(" "),a("li",[t._v("针对对象类型可以使用 instanceof，它会在原型链上检测是否有该类型的原型，但是无法检测基本类型")]),t._v(" "),a("li",[t._v("要想全面检测，可以用属性 constructor，它会返回构造函数的引用，但是这个值可以更改")]),t._v(" "),a("li",[t._v("比较全面的方法就是 Object.prototype.toString.call()，它会返回一个内置属性 [[class]],进而判断类型")]),t._v(" "),a("li",[t._v("最后还有一些特殊方法比如检测数组 Array.isArray()")])]),t._v(" "),a("h3",{attrs:{id:"数据类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型转换"}},[t._v("#")]),t._v(" 数据类型转换")]),t._v(" "),a("h3",{attrs:{id:"_0-1-0-2-0-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-1-0-2-0-3"}},[t._v("#")]),t._v(" 0.1 + 0.2 !== 0.3")]),t._v(" "),a("p",[t._v("JS 采用 IEEE 754 双精度版本，采用 64 位固定长度来表示，在二进制存储时会表现为无穷，而最多保留 52位，因此会出现精度丢失，再将其转为十进制时又一次精度确实，解决方法是将两个数乘以10计算后再除以10")]),t._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])])}),[],!1,null,null,null);a.default=r.exports}}]);