(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{456:function(v,_,t){"use strict";t.r(_);var a=t(8),T=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"http概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http概述"}},[v._v("#")]),v._v(" HTTP概述")]),v._v(" "),_("p",[v._v("HTTP协议（HyperText Transfer Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议。")]),v._v(" "),_("p",[v._v("设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法，它是一个基于 TCP/IP 通信协议来传输数据的应用层协议。")]),v._v(" "),_("h2",{attrs:{id:"一句话概述http"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一句话概述http"}},[v._v("#")]),v._v(" 一句话概述HTTP")]),v._v(" "),_("p",[v._v("HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范。")]),v._v(" "),_("p",[v._v("（HTTP通常跑在TCP/IP协议栈之上，依靠IP协议实现寻址和路由、TCP协议实现可靠数据传输、DNS协议实现域名查找、SSL/TLS协议实现安全通信。当然，WebSocket、HTTPDNS依赖于HTTP。——「进击的前端工程师」HTTP的世界观(附HTTP/3中文翻译)-童欧巴）")]),v._v(" "),_("h2",{attrs:{id:"http经典的几个版本"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http经典的几个版本"}},[v._v("#")]),v._v(" HTTP经典的几个版本")]),v._v(" "),_("p",[v._v("第一版 HTTP/0.9 于1990年问世，并没有作为正式的标准被建立。\n作为正式的标准被建立是 HTTP/1.0，于1996年5月发布。(比霖呆呆大了4个月)\n目前主流的版本是 HTTP/1.1，于1997年1月发布。\n2015年5月 正式发布HTTP/2。(不叫HTTP/2.0，是因为标准委员会不打算发布子版本，下一个版本直接是HTTP/3)")]),v._v(" "),_("h2",{attrs:{id:"http存在的位置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http存在的位置"}},[v._v("#")]),v._v(" HTTP存在的位置")]),v._v(" "),_("p",[v._v("处于 TCP/IP 网络分层模型中的第一层应用层。")]),v._v(" "),_("p",[v._v("应用层的其它协议还有：")]),v._v(" "),_("ul",[_("li",[v._v("FTP：文件传输协议，用来在客户机和FTP服务器之间传输文件。")]),v._v(" "),_("li",[v._v("DNS域名系统：提供域名到IP地址之间的解析服务。")]),v._v(" "),_("li",[v._v("SMTP：邮件发送协议，用户通过SMTP服务器发送邮件。")]),v._v(" "),_("li",[v._v("DHCP：动态主机配置协议，DHCP服务器为客户机动态分配IP地址。")]),v._v(" "),_("li",[v._v("POP3：邮件接收协议，用于从POP3服务器接收邮件。")])]),v._v(" "),_("h2",{attrs:{id:"http特点及缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http特点及缺点"}},[v._v("#")]),v._v(" HTTP特点及缺点")]),v._v(" "),_("h3",{attrs:{id:"http特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http特点"}},[v._v("#")]),v._v(" HTTP特点")]),v._v(" "),_("ul",[_("li",[v._v("TTP协议支持客户端/服务端模式，也是一种请求/响应模式的协议。")]),v._v(" "),_("li",[v._v("灵活可扩展：一个是语义上的自由，只规定了基本格式，其它的各部分没有严格的限制；第二个它允许传输任意类型的数据对象，例如文本、图片、音频等，传输的类型由Content-Type加以标记。")]),v._v(" "),_("li",[v._v("可靠传输，HTTP 基于 TCP/IP，因此把这一特性继承了下来。")]),v._v(" "),_("li",[v._v("无状态，也就是说HTTP请求不具备保存之前发送过的请求或响应的功能，每一次请求都是独立无关的。")])]),v._v(" "),_("h3",{attrs:{id:"http的缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http的缺点"}},[v._v("#")]),v._v(" HTTP的缺点")]),v._v(" "),_("ul",[_("li",[v._v("明文传输(不加密)，内容可能被窃听。")]),v._v(" "),_("li",[v._v("无法验证报文的完整性，内容可能被篡改。")]),v._v(" "),_("li",[v._v("不验证通信方的身份，有可能遭遇伪装。")]),v._v(" "),_("li",[v._v("无状态，它是缺点也是优点吧，分不同的场景。")]),v._v(" "),_("li",[v._v("队头阻塞。\n详细来说：")])]),v._v(" "),_("h2",{attrs:{id:"队头阻塞"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#队头阻塞"}},[v._v("#")]),v._v(" 队头阻塞：")]),v._v(" "),_("p",[v._v("其根本原因在于HTTP是基于 请求-响应 的模型，在同一个TCP长连接中，前一个请求没有得到响应，后面的请求就会被阻塞。\n用并发连接 和 域名分片 来解决了这个问题。但并不是从HTTP本身的层面来解决的，只是增加了 TCP 连接，分摊风险而已。\nHTTP/2中的多路复用从HTTP本身的层面解决了这个问题\n和TCP队头阻塞的区别：TCP传输的单位是数据包，它的队头阻塞表示的是前一个报文没有收到便不会将下一个报文上传给HTTP。而HTTP队头阻塞是在 请求-响应 层面，前一个请求还没有处理完，后面的请求就被阻塞。")]),v._v(" "),_("h2",{attrs:{id:"http请求方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http请求方法"}},[v._v("#")]),v._v(" HTTP请求方法")]),v._v(" "),_("h3",{attrs:{id:"方法种类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#方法种类"}},[v._v("#")]),v._v(" 方法种类")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("GET：获取资源")])]),v._v(" "),_("li",[_("p",[v._v("HEAD：获取报文首部，和GET很像但是不返回报文主体")])]),v._v(" "),_("li",[_("p",[v._v("POST: 创建或更新资源")])]),v._v(" "),_("li",[_("p",[v._v("PUT: 创建或更新资源本身")])]),v._v(" "),_("li",[_("p",[v._v("PATCH：对资源进行局部更新")])]),v._v(" "),_("li",[_("p",[v._v("DELETE：删除资源，和PUT功能相反")])]),v._v(" "),_("li",[_("p",[v._v("OPTIONS：查询服务器端支持的HTTP方法种类")])]),v._v(" "),_("li",[_("p",[v._v("CONNECT：建立连接隧道，用于代理服务器")])]),v._v(" "),_("li",[_("p",[v._v("TRACE：追踪请求，查询发出去的请求是怎样被加工/篡改的，幂等操作。容易引发XST跨站追踪攻击。")])])]),v._v(" "),_("h3",{attrs:{id:"幂等"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#幂等"}},[v._v("#")]),v._v(" 幂等")]),v._v(" "),_("p",[v._v("如果一个方法重复执行多次，产生的效果是一样的，那么这个方法就是幂等的。它本质上意味着成功执行请求的结果与其执行次数无关。")]),v._v(" "),_("p",[v._v("让我们来具体看看每一项的分析：")]),v._v(" "),_("ul",[_("li",[v._v("GET 方法用于获取资源，不应该有副作用，所以它是幂等的。这里指的是调用多少次都没有副作用，而不是每次GET的结果都相同。因为你想想有可能直接去改了数据库的这条数据，那么下次获取到的可能就不相同了，但是它本身并没有产生副作用，所以满足幂等。")]),v._v(" "),_("li",[v._v("HEAD方法GET情况一样，只不过它只用于获取报文首部，不返回报文主体，所以它也是幂等的。")]),v._v(" "),_("li",[v._v("POST 用于创建资源，每次返回结果可能不一样，是非幂等")]),v._v(" "),_("li",[v._v("PUT 用于更新资源，因为是全局更新，所以每次返回结果一样，是幂等")]),v._v(" "),_("li",[v._v("PATCH 也用于更新资源，但是是局部更新，有可能返回结果不一样，是非幂等")]),v._v(" "),_("li",[v._v("DELETE方法用于删除资源，有副作用(意思就是会修改服务器上的资源内容)，但它却是幂等的。因为删除资源后，调用者可以多次调用或刷新页面而不必担心引起错误。")]),v._v(" "),_("li",[v._v("OPTIONS这个很好理解，只是为了获取服务器支持的方法，我知道的一般是使用了代理然后进行一个预请求的时候会用到。它是幂等的。")])]),v._v(" "),_("h3",{attrs:{id:"get和post的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#get和post的区别"}},[v._v("#")]),v._v(" GET和POST的区别")]),v._v(" "),_("ul",[_("li",[v._v("从缓存的角度上说，GET会被浏览器主动缓存下来，留下历史记录，但是POST不会。")]),v._v(" "),_("li",[v._v("从编码的角度上说，GET只能进行URL编码，它只能接收ASCII字符，但是POST没有限制。")]),v._v(" "),_("li",[v._v("从参数的角度上说，GET一般放在URL上传递参数，POST放在请求体里，更适合传递敏感信息。")]),v._v(" "),_("li",[v._v("从幂等的角度上说，GET是幂等的，而POST不是。")])]),v._v(" "),_("h3",{attrs:{id:"支持度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#支持度"}},[v._v("#")]),v._v(" 支持度")]),v._v(" "),_("ul",[_("li",[v._v("OPTIONS、CONNECT、TRACE只在HTTP/1.1以上被支持")]),v._v(" "),_("li",[v._v("LINK、UNLINK在HTTP/1.1中被废弃")])]),v._v(" "),_("h2",{attrs:{id:"http状态码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http状态码"}},[v._v("#")]),v._v(" HTTP状态码")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("1xx 信息性")]),v._v(" "),_("ul",[_("li",[v._v("101 Switching Protocols ：在HTTP升级为WebSocket时，如果服务器同意变更，则返回 101。")])])]),v._v(" "),_("li",[_("p",[v._v("2xx 成功状态")]),v._v(" "),_("ul",[_("li",[v._v("200 OK ：请求成功，通常返回的数据中带有响应体。")]),v._v(" "),_("li",[v._v("204 No Content：意思和200一样，不过返回的数据中不带有响应体。")]),v._v(" "),_("li",[v._v("206 Partial Content：客户端进行了范围请求且服务端正常处理，响应报文的首部应该还有Content-Range字段指定实体的范围。使用场景为HTTP分块下载和断点续传。")])])]),v._v(" "),_("li",[_("p",[v._v("3xx 重定向")]),v._v(" "),_("ul",[_("li",[v._v("301 Moved Permanently：永久重定向，最新的URI为响应报文首部的 Location 字段。场景是：例如你的网站换了地址了，之前的地址不用了，若用户还是从之前的地址进的话则会返回301且在Location中带上最新的URI。且浏览器默认会做缓存优化，减少服务器压力，在第二次访问的时候自动访问重定向的那个地址。")]),v._v(" "),_("li",[v._v("302 Found：临时重定向，和301不同，它表示请求的资源临时被移动到了别的URI上，因为是暂时的，所以不会被缓存。")]),v._v(" "),_("li",[v._v("303 See Other：临时重定向，请求的资源临时被移动到了别的URI上，但是明确表示客户端应该使用GET方法获取资源。")]),v._v(" "),_("li",[v._v("304 Not Modefied：客户端带条件请求时虽未满足条件但是也允许返回该资源，它虽然被划分在3xx中，但其实和重定向没有关系。")]),v._v(" "),_("li",[v._v("307 Temprary Redirect：临时重定向，但是比302更加明确，重定向的请求方法和实体都不允许变动。")])])]),v._v(" "),_("li",[_("p",[v._v("4xx 客户端错误")]),v._v(" "),_("ul",[_("li",[v._v("400 Bad Request：请求报文中存在语法错误，但是没有具体指出是哪里。")]),v._v(" "),_("li",[v._v("401 Unauthorized：需要有通过HTTP认证的认证信息或者表示用户认证失败。")]),v._v(" "),_("li",[v._v("403 Forbidden：请求资源被拒绝，原因是：比如法律禁止、信息敏感。")]),v._v(" "),_("li",[v._v("404 Not Found：请求资源未找到，表示没在服务器上找到相应的资源。")])])]),v._v(" "),_("li",[_("p",[v._v("5xx 服务端出现错误")]),v._v(" "),_("ul",[_("li",[v._v("500 Internal Server Error：服务器内部错误，但是没有具体指出是哪里，和400有点像。")]),v._v(" "),_("li",[v._v("501 Not Implemented：表示客户端请求的功能还不支持")]),v._v(" "),_("li",[v._v("502 Bad GateWay：服务器自身是正常的，但是代理服务器无法获取到合法响应")]),v._v(" "),_("li",[v._v("503 Service Unavailable：服务器内部处于超负载状态或进行停机维护")])])])]),v._v(" "),_("h3",{attrs:{id:"三种临时重定向简单比较"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三种临时重定向简单比较"}},[v._v("#")]),v._v(" 三种临时重定向简单比较：")]),v._v(" "),_("ul",[_("li",[v._v("302 Found，基本的临时重定向")]),v._v(" "),_("li",[v._v("303 See Other，明确表示客户端应该使用GET方法")]),v._v(" "),_("li",[v._v("307 Temprary Redirect，请求方法和实体都不允许变动")])]),v._v(" "),_("h2",{attrs:{id:"常见-http-请求头"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常见-http-请求头"}},[v._v("#")]),v._v(" 常见 HTTP 请求头")]),v._v(" "),_("ul",[_("li",[v._v("Accept-Charset：客户端接受字符集")]),v._v(" "),_("li",[v._v("Accept-Encoding：客户端接受的内容编码")]),v._v(" "),_("li",[v._v("Accept-Language：浏览器语言")]),v._v(" "),_("li",[v._v("Host：指定请求资源的主机和端口号")]),v._v(" "),_("li",[v._v("User-Agent：用户代理")]),v._v(" "),_("li",[v._v("Connection：浏览器和服务器连接类型")]),v._v(" "),_("li",[v._v("Cookie：请求附带 Cookie")]),v._v(" "),_("li",[v._v("Referer：请求页面的 URL")])]),v._v(" "),_("h2",{attrs:{id:"常见-http-响应头"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常见-http-响应头"}},[v._v("#")]),v._v(" 常见 HTTP 响应头")]),v._v(" "),_("ul",[_("li",[v._v("Date：服务器时间")]),v._v(" "),_("li",[v._v("Server：服务器名称")]),v._v(" "),_("li",[v._v("Connection：服务器和浏览器连接类型")]),v._v(" "),_("li",[v._v("Cache-Control：缓存控制")]),v._v(" "),_("li",[v._v("Content-Type：控制文档 MIME 类型")])]),v._v(" "),_("h2",{attrs:{id:"http-1-0-和-http-1-1-区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0-和-http-1-1-区别"}},[v._v("#")]),v._v(" HTTP 1.0 和 HTTP 1.1 区别")]),v._v(" "),_("ul",[_("li",[v._v("连接：\n"),_("ul",[_("li",[v._v("HTTP 1.0 非持久连接")]),v._v(" "),_("li",[v._v("HTTP 1.1 默认开启 keep-alive 实现持久连接")])])]),v._v(" "),_("li",[v._v("资源请求\n"),_("ul",[_("li",[v._v("HTTP 1.0 不支持断点续传")]),v._v(" "),_("li",[v._v("HTTP 1.1 加入 Range，可设置 content-length，实现断点续传，返回 206")])])]),v._v(" "),_("li",[v._v("缓存：\n"),_("ul",[_("li",[v._v("强缓存：\n"),_("ul",[_("li",[v._v("HTTP 1.0 使用 Expires")]),v._v(" "),_("li",[v._v("HTTP 1.1 使用 Cache-Control 中的 max-age")])])]),v._v(" "),_("li",[v._v("协商缓存\n"),_("ul",[_("li",[v._v("HTTP 1.0 使用 Last-Modified 和 If-Modified-Sice")]),v._v(" "),_("li",[v._v("HTTP 1.1 使用 ETag 和 If-None-Match")])])])])]),v._v(" "),_("li",[v._v("请求方法：HTTP 1.1 新增：put、head、options")]),v._v(" "),_("li",[v._v("host：HTTP 1.1 新增 host，能够多台主机共用一个 ip 地址，多个请求同时发到一个服务器的不同网站")])]),v._v(" "),_("h2",{attrs:{id:"http-1-1-和-http-2-0-区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1-和-http-2-0-区别"}},[v._v("#")]),v._v(" HTTP 1.1 和 HTTP 2.0 区别")]),v._v(" "),_("ul",[_("li",[v._v("协议：\n"),_("ul",[_("li",[v._v("HTTP 1.1 报文信息必须是文本")]),v._v(" "),_("li",[v._v("HTTP 2.0 是二进制协议，可以传二进制报文信息")])])]),v._v(" "),_("li",[v._v("解决队头阻塞：\n"),_("ul",[_("li",[v._v("1.1 采用域名分片和并发连接缓解队头阻塞")]),v._v(" "),_("li",[v._v("2.0 采用多路复用解决队头阻塞")])])]),v._v(" "),_("li",[v._v("数据流：2.0 基于数据流，数据包可以不按照顺序发送")]),v._v(" "),_("li",[v._v("头部信息压缩：2.0 加入头部信息压缩，用索引去信息数组中查找，节省资源")]),v._v(" "),_("li",[v._v("服务器推送：2.0 允许服务器主动向浏览器推送静态资源")])]),v._v(" "),_("h2",{attrs:{id:"http-3-0"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-3-0"}},[v._v("#")]),v._v(" HTTP 3.0")]),v._v(" "),_("p",[v._v("HTTP 3.0 采用的是 QUIC 协议，它是基于 UDP 协议的，实现类似于 TCP 的多路复用数据流，能够达到可靠性传输的效果。")]),v._v(" "),_("p",[v._v("由于采用 UDP，从根本上解决由 TCP 引起的 HTTP 队头阻塞问题。")]),v._v(" "),_("p",[v._v("HTTP 3.0 集成了 TLS 加密功能")])])}),[],!1,null,null,null);_.default=T.exports}}]);