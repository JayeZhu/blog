(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{504:function(t,a,s){"use strict";s.r(a);var n=s(8),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("在上一章中，我们探讨了 React 的设计哲学，其中一个核心观点是："),a("strong",[t._v("我们只负责声明 UI 和 "),a("code",[t._v("state")]),t._v(" 的映射关系，而将 DOM 更新的脏活累活交给 React")]),t._v("。那么，React 是如何高效地完成这项任务的呢？答案就藏在 "),a("strong",[t._v("Virtual DOM")]),t._v(" 和其核心的 "),a("strong",[t._v("Diff 算法")]),t._v("之中。它们是 React 性能优化和跨平台能力的基石，本章我们将彻底揭开它们的神秘面纱。")]),t._v(" "),a("h2",{attrs:{id:"_3-1-什么是-virtual-dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-什么是-virtual-dom"}},[t._v("#")]),t._v(" 3.1 什么是 Virtual DOM？")]),t._v(" "),a("p",[a("strong",[t._v("Virtual DOM（虚拟 DOM）")]),t._v("，顾名思义，它不是真实的 DOM。它本质上是一个普通的 JavaScript 对象，用来描述真实 DOM 的结构和属性。")]),t._v(" "),a("p",[t._v("我们可以把它想象成真实 DOM 的“蓝图”或“副本”。当你用 JSX 编写一个组件时：")]),t._v(" "),a("div",{staticClass:"language-jsx line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("className")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("greeting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n    Hello, world!\n  ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("Babel 会将其转换成一个如下的 Virtual DOM 对象（简化版）：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'h1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("props")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("className")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'greeting'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("children")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello, world!'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("这个对象包含了所有构建真实 DOM 节点所需的信息：标签类型（"),a("code",[t._v("type")]),t._v("）、属性（"),a("code",[t._v("props")]),t._v("）和子元素（"),a("code",[t._v("children")]),t._v("）。React 维护着一棵由这些对象构成的 Virtual DOM 树，它与我们页面上的真实 DOM 树一一对应。")]),t._v(" "),a("h2",{attrs:{id:"_3-2-为什么需要-virtual-dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-为什么需要-virtual-dom"}},[t._v("#")]),t._v(" 3.2 为什么需要 Virtual DOM？")]),t._v(" "),a("p",[t._v("直接操作真实的 DOM 到底有什么问题，以至于 React 要大费周章地引入一个中间层呢？主要原因有两点：")]),t._v(" "),a("h3",{attrs:{id:"_3-2-1-dom-操作是-昂贵-的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-dom-操作是-昂贵-的"}},[t._v("#")]),t._v(" 3.2.1 DOM 操作是“昂贵”的")]),t._v(" "),a("p",[t._v("在浏览器中，DOM 是一个非常复杂的对象。每一次对 DOM 的操作（如读取或修改属性、增删节点）都可能触发"),a("strong",[t._v("浏览器的重排")]),t._v("或"),a("strong",[t._v("重绘")]),t._v("，这个过程会消耗大量的计算资源。想象一下，如果我们频繁地、直接地去修改 DOM，就像在厨房里每切一刀都要洗一次手一样，低效且繁琐。")]),t._v(" "),a("p",[t._v("Virtual DOM 的出现，将这个“洗手的”过程变得极其高效：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("批量更新")]),t._v("：当状态变化时，React 会先在内存中对 Virtual DOM 树进行修改，这个过程非常快，因为它只是 JavaScript 对象的计算。")]),t._v(" "),a("li",[a("strong",[t._v("Diff 计算")]),t._v("：React 会通过 Diff 算法，比较新旧两棵 Virtual DOM 树，找出最小的差异。")]),t._v(" "),a("li",[a("strong",[t._v("一次性打补丁")]),t._v("：最后，React 只将这些计算出的差异一次性地、批量地更新到真实 DOM 上。")])]),t._v(" "),a("p",[t._v("这个过程就像你先在草稿纸上写好完整的修改方案，检查无误后，再一次性誊写到正式文件上，而不是边想边改。Virtual DOM 就是那张“草稿纸”，它将多次、零散的 DOM 操作合并为一次，大大提升了性能。")]),t._v(" "),a("h3",{attrs:{id:"_3-2-2-提供跨平台能力"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-提供跨平台能力"}},[t._v("#")]),t._v(" 3.2.2 提供跨平台能力")]),t._v(" "),a("p",[t._v("我们之前提到，React 的核心价值之一是跨平台。Virtual DOM 在这里扮演了关键角色。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Virtual DOM")]),t._v(" 是对 UI 的抽象描述，它与具体的平台无关。")]),t._v(" "),a("li",[a("strong",[t._v("Renderer（渲染器）")]),t._v(" 负责将 Virtual DOM 树渲染到不同平台上。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://miro.medium.com/v2/resize:fit:1400/1*5j2_2A5gQ7g2h2k3e9w3_A.png",alt:""}})]),t._v(" "),a("p",[t._v("React 团队可以针对不同平台（Web、iOS、Android）开发不同的 Renderer。例如，在 Web 端，"),a("code",[t._v("react-dom")]),t._v(" 负责将 Virtual DOM 转换为真实的 DOM；而在 Native 端，"),a("code",[t._v("react-native")]),t._v(" 负责将其转换为原生的 UI 控件。开发者始终使用相同的 React API（即操作 Virtual DOM），而无需关心底层的渲染细节，完美实现了“Learn once, write anywhere”。")]),t._v(" "),a("h2",{attrs:{id:"_3-3-diff-算法核心思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-diff-算法核心思想"}},[t._v("#")]),t._v(" 3.3 Diff 算法核心思想")]),t._v(" "),a("p",[t._v("现在我们知道了 Virtual DOM 的重要性，但还有一个关键问题：React 如何快速地找出新旧两棵 Virtual DOM 树之间的差异呢？这就是 "),a("strong",[t._v("Diff 算法")]),t._v("要解决的问题。")]),t._v(" "),a("h3",{attrs:{id:"_3-3-1-从-o-n3-到-o-n-的优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-从-o-n3-到-o-n-的优化"}},[t._v("#")]),t._v(" 3.3.1 从 O(n³) 到 O(n) 的优化")]),t._v(" "),a("p",[t._v("如果要对两棵树进行完整的、逐节点的对比，这是一个非常复杂的问题，其时间复杂度高达 "),a("strong",[t._v("O(n³)")]),t._v("，其中 n 是树中节点的数量。对于一个包含 1000 个节点的应用，需要进行约 10 亿次比较，这在实际应用中是完全不可接受的。")]),t._v(" "),a("p",[t._v("React 的工程师们通过一个巧妙的洞察，将这个复杂度优化到了 "),a("strong",[t._v("O(n)")]),t._v("。他们基于以下三个"),a("strong",[t._v("假设")]),t._v("，制定了一套启发式算法：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("不同类型的元素会产生不同的树")]),t._v("：如果一个元素的类型发生了变化（例如从 "),a("code",[t._v("<a>")]),t._v(" 变为 "),a("code",[t._v("<img>")]),t._v("），React 会认为这整个子树都变了，会直接销毁旧树，创建新树，而不会去比较其内部。")]),t._v(" "),a("li",[a("strong",[t._v("开发者可以通过 "),a("code",[t._v("key")]),t._v(" 来暗示哪些子元素是稳定的")]),t._v("：对于列表中的元素，React 无法通过位置判断它们是否是同一个。"),a("code",[t._v("key")]),t._v(" 属性帮助 React 识别元素的身份。")]),t._v(" "),a("li",[a("strong",[t._v("只对同层级节点进行比较")]),t._v("：React 不会跨层级比较节点。如果发现父节点不同，它会直接替换整个子树。")])]),t._v(" "),a("h3",{attrs:{id:"_3-3-2-diff-策略详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-diff-策略详解"}},[t._v("#")]),t._v(" 3.3.2 Diff 策略详解")]),t._v(" "),a("p",[t._v("基于以上假设，React 的 Diff 策略可以分解为三个部分：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("Tree Diff")]),t._v("：对 Virtual DOM 树进行分层比较。React 只会对比同一层级内的节点，跨层级的节点会被视为整体替换。")]),t._v(" "),a("li",[a("strong",[t._v("Component Diff")]),t._v("：如果是组件类型，对比两个组件的类型。如果类型不同，则认为整个组件都变了，替换掉整个组件实例。如果类型相同，则暂时保留该组件实例，继续深入比较其 "),a("code",[t._v("props")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("Element Diff")]),t._v("：当处于同一层级且都是 DOM 元素时，进行详细的属性和子节点对比。这是最复杂的一步，尤其是对于列表类型的子节点。")])]),t._v(" "),a("h2",{attrs:{id:"_3-4-key-的魔力-高效更新列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-key-的魔力-高效更新列表"}},[t._v("#")]),t._v(" 3.4 "),a("code",[t._v("key")]),t._v(" 的魔力：高效更新列表")]),t._v(" "),a("p",[t._v("在 Element Diff 中，处理子节点列表是最具挑战性的。如果没有 "),a("code",[t._v("key")]),t._v("，React 的默认行为是按顺序对比新旧列表中的子节点。")]),t._v(" "),a("p",[t._v("让我们通过一个经典的"),a("strong",[t._v("列表重排")]),t._v("例子来理解 "),a("code",[t._v("key")]),t._v(" 的重要性。")]),t._v(" "),a("h3",{attrs:{id:"_3-4-1-没有-key-的灾难"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-没有-key-的灾难"}},[t._v("#")]),t._v(" 3.4.1 没有 "),a("code",[t._v("key")]),t._v(" 的灾难")]),t._v(" "),a("p",[t._v("假设我们有一个列表，初始状态是 "),a("code",[t._v("['A', 'B', 'C']")]),t._v("，现在要在中间插入一个 "),a("code",[t._v("'D'")]),t._v("，变成 "),a("code",[t._v("['A', 'D', 'B', 'C']")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("没有 "),a("code",[t._v("key")]),t._v(" 的情况下，React 的 Diff 过程是这样的：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("对比第一个子节点")]),t._v("：旧 "),a("code",[t._v("A")]),t._v(" vs 新 "),a("code",[t._v("A")]),t._v(" -> 相同，保留。")]),t._v(" "),a("li",[a("strong",[t._v("对比第二个子节点")]),t._v("：旧 "),a("code",[t._v("B")]),t._v(" vs 新 "),a("code",[t._v("D")]),t._v(" -> "),a("strong",[t._v("不同")]),t._v("！React 会认为第二个元素从 "),a("code",[t._v("B")]),t._v(" 变成了 "),a("code",[t._v("D")]),t._v("，于是它会修改 DOM，把 "),a("code",[t._v("<li>B</li>")]),t._v(" 改成 "),a("code",[t._v("<li>D</li>")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("对比第三个子节点")]),t._v("：旧 "),a("code",[t._v("C")]),t._v(" vs 新 "),a("code",[t._v("B")]),t._v(" -> "),a("strong",[t._v("不同")]),t._v("！React 会认为第三个元素从 "),a("code",[t._v("C")]),t._v(" 变成了 "),a("code",[t._v("B")]),t._v("，于是修改 DOM，把 "),a("code",[t._v("<li>C</li>")]),t._v(" 改成 "),a("code",[t._v("<li>B</li>")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("新增节点")]),t._v("：React 发现新列表多了一个节点，于是在末尾创建一个新的 "),a("code",[t._v("<li>C</li>")]),t._v("。")])]),t._v(" "),a("p",[a("strong",[t._v("结果")]),t._v("：React 执行了 2 次修改和 1 次创建。明明只是一个简单的插入操作，却导致了大量不必要的 DOM 更新。")]),t._v(" "),a("h3",{attrs:{id:"_3-4-2-key-的救场"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-2-key-的救场"}},[t._v("#")]),t._v(" 3.4.2 "),a("code",[t._v("key")]),t._v(" 的救场")]),t._v(" "),a("p",[t._v("现在，我们给每个列表项加上一个唯一的 "),a("code",[t._v("key")]),t._v("，这个 "),a("code",[t._v("key")]),t._v(" 就是它们的内容本身。")]),t._v(" "),a("div",{staticClass:"language-jsx line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 旧列表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n  ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n  ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n  ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("C")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新列表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n  ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n  ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("D"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("D")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n  ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n  ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("C")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("p",[a("strong",[t._v("有了 "),a("code",[t._v("key")]),t._v(" 之后，React 的 Diff 过程完全不同了：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("遍历旧列表")]),t._v("：\n"),a("ul",[a("li",[t._v("找到 "),a("code",[t._v('key="A"')]),t._v(" 的元素，在新列表中也找到了，位置没变，保留。")]),t._v(" "),a("li",[t._v("找到 "),a("code",[t._v('key="B"')]),t._v(" 的元素，在新列表中也找到了，但位置变了（从 index 1 变成了 index 2）。")]),t._v(" "),a("li",[t._v("找到 "),a("code",[t._v('key="C"')]),t._v(" 的元素，在新列表中也找到了，位置也变了（从 index 2 变成了 index 3）。")])])]),t._v(" "),a("li",[a("strong",[t._v("遍历新列表")]),t._v("：\n"),a("ul",[a("li",[t._v("找到 "),a("code",[t._v('key="D"')]),t._v(" 的元素，在旧列表中不存在，这是一个新元素，需要创建。")])])])]),t._v(" "),a("p",[a("strong",[t._v("结果")]),t._v("：React 识别出 "),a("code",[t._v("'A'")]),t._v(" 保持不变，"),a("code",[t._v("'B'")]),t._v(" 和 "),a("code",[t._v("'C'")]),t._v(" 只是移动了位置，"),a("code",[t._v("'D'")]),t._v(" 是新增的。于是，它只需要执行 1 次创建和 2 次移动 DOM 节点的操作。这比之前的 2 次修改和 1 次创建要高效得多，尤其是当列表项是复杂组件时，避免了不必要的重新渲染和销毁。")]),t._v(" "),a("h3",{attrs:{id:"_3-4-3-关于-key-的最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-3-关于-key-的最佳实践"}},[t._v("#")]),t._v(" 3.4.3 关于 "),a("code",[t._v("key")]),t._v(" 的最佳实践")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("保持唯一和稳定")]),t._v("："),a("code",[t._v("key")]),t._v(" 必须在列表中是唯一的，并且在多次渲染间保持稳定。不要使用 "),a("code",[t._v("Math.random()")]),t._v(" 或数组索引 "),a("code",[t._v("index")]),t._v(" 作为 "),a("code",[t._v("key")]),t._v("，因为它们不稳定，会导致 React 无法正确识别元素，反而降低性能。")]),t._v(" "),a("li",[a("strong",[t._v("来源")]),t._v("：通常，"),a("code",[t._v("key")]),t._v(" 应该使用来自你的数据的一个唯一标识符，比如数据库中的 ID。")])]),t._v(" "),a("div",{staticClass:"language-jsx line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 好的做法")]),t._v("\ntodos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("todo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token script language-javascript"}},[a("span",{pre:!0,attrs:{class:"token script-punctuation punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("todo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n    ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("todo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n  ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不好的做法")]),t._v("\ntodos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("todo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token script language-javascript"}},[a("span",{pre:!0,attrs:{class:"token script-punctuation punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n    ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("todo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n  ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h2",{attrs:{id:"_3-5-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-总结"}},[t._v("#")]),t._v(" 3.5 总结")]),t._v(" "),a("p",[t._v("Virtual DOM 和 Diff 算法是 React 性能优化的核心。它们通过以下方式协同工作：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("Virtual DOM")]),t._v(" 作为真实 DOM 的轻量级 JavaScript 抽象，让我们可以高效地进行 UI 计算，并提供了跨平台的能力。")]),t._v(" "),a("li",[a("strong",[t._v("Diff 算法")]),t._v(" 通过三个核心假设，将复杂的树对比问题从 O(n³) 优化到 O(n)，使得 Virtual DOM 的更新变得可行。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("key")])]),t._v(" 是 Diff 算法处理列表时的“导航仪”，它能帮助 React 识别元素的移动、新增和删除，从而进行最高效的 DOM 操作。")])]),t._v(" "),a("p",[t._v("理解了 Virtual DOM 的工作原理，你就明白了 React 为什么能够如此高效地管理复杂的用户界面。在下一章，我们将深入探讨 React 的渲染流程，看看这些概念是如何在 Fiber 架构中落地执行的。")])])}),[],!1,null,null,null);a.default=e.exports}}]);