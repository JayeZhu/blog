(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{516:function(t,e,a){"use strict";a.r(e);var r=a(15),v=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"浏览器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器"}},[t._v("#")]),t._v(" 浏览器")]),t._v(" "),a("p",[t._v("浏览器是从事前端开发过程中最重要的开发环境，对浏览器的了解，决定了前端代码性能的上限。")]),t._v(" "),a("p",[t._v("浏览器的主要功能是从服务器请求资源，并将资源在浏览器上呈现出来。")]),t._v(" "),a("h2",{attrs:{id:"浏览器组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器组成"}},[t._v("#")]),t._v(" 浏览器组成")]),t._v(" "),a("ul",[a("li",[t._v("用户界面：包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗⼝显示的您请求的⻚⾯外，其他显示的各个部分都属于⽤户界⾯")]),t._v(" "),a("li",[t._v("浏览器引擎：协调（主控）UI和the Rendering Engine，在他们之间传输指令。 提供对The Rendering Engine的高级接口，一方面它提供初始化加载Url和其他高级的浏览器动作（如刷新、向前、退后等）方法。另一方面Browser Engine也为User Interface提供各种与错误、加载进度相关的消息。")]),t._v(" "),a("li",[t._v("渲染引擎：为给定的URL提供可视化的展示。它解析JavaScript、Html、Xml，并且User Interface中展示的layout。其中关键的组件是Html解析器，它可以让Rendering Engine展示差乱的Html页面。 值得注意：不同的浏览器使用不同的Rendering Engine。例如IE使用Trident，Firefox使用Gecko，Safai使用Webkit。Chrome和Opera使用Webkit（以前是Blink）")]),t._v(" "),a("li",[t._v("网络：基于互联网HTTP和FTP协议，处理网络请求。网络模块负责Internet communication and security，character set translations and MIME type resolution。另外网络模块还提供获得到文档的缓存，以减少网络传输。为所有平台提供底层网络实现，其提供的接口与平台无关")]),t._v(" "),a("li",[t._v("用户界面后端：用于绘制基本的窗口小部件，比如组合框和窗口。而在底层使用操作系统的用户界面方法，并公开与平台无关的接口。")]),t._v(" "),a("li",[t._v("JS 解释器：解释和运行网站上的js代码，得到的结果传输到Rendering Engine来展示。")]),t._v(" "),a("li",[t._v("数据存储：管理用户数据，例如书签、cookie和偏好设置等。")])]),t._v(" "),a("p",[t._v("浏览器分为两部分：shell 和 内核 (Rendering Engine)")]),t._v(" "),a("h2",{attrs:{id:"浏览器进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器进程"}},[t._v("#")]),t._v(" 浏览器进程")]),t._v(" "),a("p",[t._v("当用户输入 URL 后，由浏览器内部多进程协同工作，呈现页面")]),t._v(" "),a("h3",{attrs:{id:"浏览器主进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器主进程"}},[t._v("#")]),t._v(" 浏览器主进程")]),t._v(" "),a("p",[t._v("浏览器的主进程（负责协调、主控），只有一个。作用有")]),t._v(" "),a("ul",[a("li",[t._v("负责浏览器界面显示，与用户交互。如前进，后退等")]),t._v(" "),a("li",[t._v("负责各个页面的管理，创建和销毁其他进程")]),t._v(" "),a("li",[t._v("将Renderer进程得到的内存中的Bitmap，绘制到用户界面上")]),t._v(" "),a("li",[t._v("网络资源的管理，下载等")])]),t._v(" "),a("h3",{attrs:{id:"gpu-进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gpu-进程"}},[t._v("#")]),t._v(" GPU 进程")]),t._v(" "),a("p",[t._v("最多一个，用于3D绘制等")]),t._v(" "),a("h3",{attrs:{id:"第三方插件进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三方插件进程"}},[t._v("#")]),t._v(" 第三方插件进程")]),t._v(" "),a("p",[t._v("每种类型的插件对应一个进程，仅当使用该插件时才创建")]),t._v(" "),a("h3",{attrs:{id:"浏览器渲染进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染进程"}},[t._v("#")]),t._v(" 浏览器渲染进程")]),t._v(" "),a("p",[t._v("默认每个Tab页面一个进程，互不影响。主要作用为页面渲染，脚本执行，事件处理等")]),t._v(" "),a("h2",{attrs:{id:"浏览器内核"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核"}},[t._v("#")]),t._v(" 浏览器内核")]),t._v(" "),a("p",[t._v("浏览器内核是浏览器的核心，其实就是渲染引擎。常见浏览器所用内核有：")]),t._v(" "),a("ul",[a("li",[t._v("Trident 内核：IE内核，早期市场量最大的内核，对网页标准支持不好，安全性一般，与 W3C 标准脱节。")]),t._v(" "),a("li",[t._v("Gecko：Firefox 和 Flock 的内核。功能强大丰富，支持复杂网页效果和浏览器拓展，缺点是消耗资源多。")]),t._v(" "),a("li",[t._v("Presto：Opera 内核，速度最快，缺点是兼容性欠佳")]),t._v(" "),a("li",[t._v("Webkit：Safari 和 Chrome 内核，速度较快，略逊于 Presto，缺点是网页容错性较低")]),t._v(" "),a("li",[t._v("Blink：Chrome 和 Opera 现有内核")])]),t._v(" "),a("p",[t._v("看完这些内核，我们看下内核本身，内核主要包括以下线程")]),t._v(" "),a("h3",{attrs:{id:"浏览器-gui-渲染线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器-gui-渲染线程"}},[t._v("#")]),t._v(" 浏览器 GUI 渲染线程")]),t._v(" "),a("ul",[a("li",[t._v("HTML Parser 解析 HTML 文档，将元素转换为树结构 DOM 节点，为 DOM tree")]),t._v(" "),a("li",[t._v("CSS Parser 解析 Style 数据，包括外部的 CSS 文件以及在 HTML 元素中的样式，为 CSSOM，与 DOM 结合为 Render tree")]),t._v(" "),a("li",[t._v("Layout 过程为每个节点计算出屏幕中展示的准确坐标")]),t._v(" "),a("li",[t._v("Painting 遍历 Render Tree，调用 UI Backend 提供的接口绘制每个节点")])]),t._v(" "),a("h3",{attrs:{id:"javascript-引擎线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-引擎线程"}},[t._v("#")]),t._v(" JavaScript 引擎线程")]),t._v(" "),a("p",[t._v("JS 引擎线程负责解析 JS 脚本。JS 引擎负责处理任务队列中的任务，每个 Tab 页（renderer 线程）中只有一个 JS 线程。")]),t._v(" "),a("h3",{attrs:{id:"浏览器定时触发器线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器定时触发器线程"}},[t._v("#")]),t._v(" 浏览器定时触发器线程")]),t._v(" "),a("p",[t._v("令人惊奇的是，浏览器定时计数器并不是 JS 引擎计数的，而是由定时触发器线程负责，原因是 JS 引擎是单线程的，阻塞状态的 JS 引擎是无法准确计时的。")]),t._v(" "),a("h3",{attrs:{id:"浏览器事件触发线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器事件触发线程"}},[t._v("#")]),t._v(" 浏览器事件触发线程")]),t._v(" "),a("p",[t._v("用于将触发的事件提交到待处理队列的队尾，等待 JS 引擎的处理。这些触发事件包括当前执行的代码比如定时任务、也可以来自浏览器内核的其他线程如鼠标点击、AJAX 异步请求等。")]),t._v(" "),a("h3",{attrs:{id:"浏览器-http-异步请求线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器-http-异步请求线程"}},[t._v("#")]),t._v(" 浏览器 HTTP 异步请求线程")]),t._v(" "),a("p",[t._v("在 XMLHttpRequest 连接后会通过浏览器新增 HTTP 异步请求线程，该线程检测到状态变更并且有回调函数情况下，会产生装填变更事件放到处理队列等 JS 引擎处理。")]),t._v(" "),a("h2",{attrs:{id:"引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[t._v("#")]),t._v(" 引用")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000018277184",target:"_blank",rel:"noopener noreferrer"}},[t._v("一文看透浏览器架构"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000012925872",target:"_blank",rel:"noopener noreferrer"}},[t._v("从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=v.exports}}]);