(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{510:function(t,e,a){"use strict";a.r(e);var s=a(15),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("h2",{attrs:{id:"defineproperty"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defineproperty"}},[t._v("#")]),t._v(" defineProperty")]),t._v(" "),a("h2",{attrs:{id:"依赖收集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#依赖收集"}},[t._v("#")]),t._v(" 依赖收集")]),t._v(" "),a("h3",{attrs:{id:"什么是依赖收集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是依赖收集"}},[t._v("#")]),t._v(" 什么是依赖收集")]),t._v(" "),a("p",[t._v("首先，什么是依赖，A 用了 B，A 就依赖 B。在 Vue 中，视图某一部分用到 data 中某个属性，就是该视图依赖该属性，后续属性发生变更，只需要通知该视图更新，而不需要通知整个视图")]),t._v(" "),a("p",[t._v("依赖收集就是为每个数据建立一个依赖数组，一个数据被多处依赖，将他们依序加入依赖数组中。当该数据发生变更时，就通知对应依赖数组中的每个依赖，让他们变更。")]),t._v(" "),a("h3",{attrs:{id:"什么时候收集依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候收集依赖"}},[t._v("#")]),t._v(" 什么时候收集依赖")]),t._v(" "),a("p",[t._v("当数据被访问时会触发 getter，我们在 getter 中收集依赖")]),t._v(" "),a("h2",{attrs:{id:"派发更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#派发更新"}},[t._v("#")]),t._v(" 派发更新")]),t._v(" "),a("h2",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),a("p",[t._v("首先，vue 是一个构造函数，在创建 vue 实例前，进入 beforeCreate 钩子，然后执行 vue 构造函数中的 this.init ,在这里")]),t._v(" "),a("p",[t._v("this.init 初始化生命周期，初始化事件中心，初始化渲染，初始化 State")]),t._v(" "),a("p",[t._v("$mount -> new Watcher(updateComponent) -> 末班编译-> 生成虚拟 dom 虚拟 dom 挂载")]),t._v(" "),a("p",[t._v("模板编译 compileToFunction -> template -> render")]),t._v(" "),a("p",[t._v("虚拟 dom 生成 -》 _render -> createElement -> children 规范化 -》 createElement 创建爱你 VNODE 实例，普通节点和组件节点")]),t._v(" "),a("p",[t._v("生成节点 -> _update 首次渲染 patch")]),t._v(" "),a("p",[t._v("vue 构造函数 -> this._init -> $mount -> new Watcher(updateComponent)")]),t._v(" "),a("p",[t._v("obj -> observer -> defineReactive() -> defineProperty -> getter 收集依赖 -> setter 通知依赖")]),t._v(" "),a("p",[t._v("getter 依赖收集在 dep 中，dep 是依赖管理器，依赖就是 Watcher 实例，当 setter 触发后，通知依赖对应的 watcher 实例进行更新视图")]),t._v(" "),a("ul",[a("li",[t._v("实例化 watcher，实行构造函数")]),t._v(" "),a("li",[t._v("构造函数中调用 this.get()")]),t._v(" "),a("li",[t._v("this.get 中通过 window.target = this 将自身赋给全局的唯一对象 window.target ，")]),t._v(" "),a("li",[t._v("let value = this.getter.call(vm, vm) 获取被以来的数据，触发数据上的 getter，")]),t._v(" "),a("li",[t._v("这时会调用 getter 里的 dep.depend() 收集依赖，depend 中通过 window.target 获取 Wather，并将 window.target 释放掉")]),t._v(" "),a("li",[t._v("当数据变化时，会触发数据的 setter，setter 中调用 dep() 的 dep.notify() 方法，遍历多有 watcher 实例，执行依赖的 update() 方法，在该方法中调用数据变化的更新函数，更新视图")])]),t._v(" "),a("p",[t._v("将 watcher 设为 全局的唯一属性 window.target ，然后读取数据，触发数据的 getter，getter 中获取 window.target 拿到 watcher，同股哟 dep.depend 收集 watcher 进入 dep，并将 window。target 释放，当数据发生变化时，触发getter，getter 中调用 dep.notify,遍历依赖，执行相关依赖的 update放啊发，调用用数据的更新回调函数，更新视图")]),t._v(" "),a("p",[t._v("object.definedProperty 仅仅只能观测到 object 数据的取值及设置值，向 object 数据添加新的 key/vlaue 或删除以后的是无法进行观测的 可以通过 vue 全局 API .vue.set 和 vue.delete 删除")]),t._v(" "),a("p",[t._v("vue -> this._init -> $mount -> _mount -> new Watcher")]),t._v(" "),a("p",[t._v("new Watcher -> this.get -> window.target = this -> let value = this.getter.call(vm, vm) -> 触发 value 的 gettter -> getter 中调用")]),t._v(" "),a("p",[t._v("new Vue -> this._init -> initState -> initData -> observe -> new Observer -> object-> this.walk -> 遍历 obj 的所有子属性，执行 defineReactive -> defineProperty 设置 getter 和 setter")]),t._v(" "),a("p",[t._v("defineReactive:")]),t._v(" "),a("ul",[a("li",[t._v("new Dep")]),t._v(" "),a("li",[t._v("遍历 observe()")]),t._v(" "),a("li",[t._v("object.defineProperty()")])]),t._v(" "),a("p",[t._v("-> $mount -> mountComponent -> new Watcher")]),t._v(" "),a("p",[t._v("new Watcher -> window.tareget = this -> this.getter.call(vm, vm) -> vm.update(vm._render(), hydrating)-> 触发 getter 进行依赖收集，依赖就是 watcher 实例 -> 触发 getter 会调用 dep.depend -> 执行 dep.target.addDep(this) -> 释放 window.target")]),t._v(" "),a("p",[t._v("派发更新\n当数据更新 -> setter -> dep.notify() -> 遍历 watcher 实例数组2，调用每一个 watcher 的 update 方法 -> this.nextTick 执行 flushSchedulerQueue")]),t._v(" "),a("p",[t._v("数组变化检测\nvue 本身不能检测数组变化，采用数组劫持的方式，重写了 数组的七种可更改自身的方法，如 pop\\push\\shift\\unshift\\sort\\reverse\\splice")]),t._v(" "),a("p",[t._v("observe 遇到数组")]),t._v(" "),a("h2",{attrs:{id:"walk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#walk"}},[t._v("#")]),t._v(" walk")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("walk")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" keys "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("keys")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" keys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineReactive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" keys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])])}),[],!1,null,null,null);e.default=r.exports}}]);