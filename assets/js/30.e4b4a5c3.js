(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{448:function(t,a,s){"use strict";s.r(a);var r=s(15),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("js 是解释型语言，机器是无法读懂的，需要通过 V8 引擎做翻译工作后才能执行，共分为以下步骤")]),t._v(" "),s("h2",{attrs:{id:"生成ast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成ast"}},[t._v("#")]),t._v(" 生成AST")]),t._v(" "),s("p",[t._v("AST：即抽象语法树,编译器后续依靠 AST 进行工作。\n这个部分分为词法分析和语法分析")]),t._v(" "),s("ul",[s("li",[t._v("词法分析：将一行行代码分解成一个个 token")]),t._v(" "),s("li",[t._v("语法分析：将 token 根据语法规则转化为 AST")])]),t._v(" "),s("p",[t._v("这个部分还会生成执行上下文，下文会讲解。")]),t._v(" "),s("h2",{attrs:{id:"生成字节码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成字节码"}},[t._v("#")]),t._v(" 生成字节码")]),t._v(" "),s("p",[t._v("字节码：介于 AST 和机器码之间的代码，比传统机器码更加轻量，通过解释器转换为机器码执行。\nV8 的解释器在接收到 AST 后将其转换为 字节码，而不需要直接将全部字节码转换为机器码，降低内存压力。")]),t._v(" "),s("h2",{attrs:{id:"执行代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行代码"}},[t._v("#")]),t._v(" 执行代码")]),t._v(" "),s("p",[t._v("该阶段字节码被解释器逐行执行。并采用即时编译(JIT)，提高执行效率。\n即时编译，是将部分重复出现的代码打上热点标记，这部分代码由优化编译器提前编译为二进制。当再遇到这部分代码时，就直接执行编译而成的二进制，从而提高执行速率。")])])}),[],!1,null,null,null);a.default=e.exports}}]);